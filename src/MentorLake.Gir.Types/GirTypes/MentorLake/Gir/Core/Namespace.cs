//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("namespace", Namespace="http://www.gtk.org/introspection/core/1.0", AnonymousType=true)]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("namespace", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class Namespace
    {
        
        [XmlIgnoreAttribute()]
        private List<Alias> _alias;
        
        [XmlElementAttribute("alias")]
        public List<Alias> Alias
        {
            get
            {
                return _alias;
            }
            private set
            {
                _alias = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Alias collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AliasSpecified
        {
            get
            {
                return (this.Alias.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Namespace" /> class.</para>
        /// </summary>
        public Namespace()
        {
            this._alias = new List<Alias>();
            this._class = new List<Class>();
            this._interface = new List<Interface>();
            this._record = new List<Record>();
            this._enumeration = new List<Enumeration>();
            this._function = new List<BaseFunction>();
            this._functionInline = new List<FunctionInline>();
            this._functionMacro = new List<FunctionMacro>();
            this._union = new List<Union>();
            this._bitfield = new List<Bitfield>();
            this._callback = new List<Callback>();
            this._constant = new List<Constant>();
            this._attribute = new List<Attribute>();
            this._boxed = new List<MentorLake.Gir.GLib.Boxed>();
            this._docsection = new List<Docsection>();
        }
        
        [XmlIgnoreAttribute()]
        private List<Class> _class;
        
        [XmlElementAttribute("class")]
        public List<Class> Class
        {
            get
            {
                return _class;
            }
            private set
            {
                _class = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Class collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ClassSpecified
        {
            get
            {
                return (this.Class.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Interface> _interface;
        
        [XmlElementAttribute("interface")]
        public List<Interface> Interface
        {
            get
            {
                return _interface;
            }
            private set
            {
                _interface = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Interface collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool InterfaceSpecified
        {
            get
            {
                return (this.Interface.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Record> _record;
        
        [XmlElementAttribute("record")]
        public List<Record> Record
        {
            get
            {
                return _record;
            }
            private set
            {
                _record = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Record collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RecordSpecified
        {
            get
            {
                return (this.Record.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Enumeration> _enumeration;
        
        [XmlElementAttribute("enumeration")]
        public List<Enumeration> Enumeration
        {
            get
            {
                return _enumeration;
            }
            private set
            {
                _enumeration = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Enumeration collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool EnumerationSpecified
        {
            get
            {
                return (this.Enumeration.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<BaseFunction> _function;
        
        [XmlElementAttribute("function")]
        public List<BaseFunction> Function
        {
            get
            {
                return _function;
            }
            private set
            {
                _function = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Function collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionSpecified
        {
            get
            {
                return (this.Function.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<FunctionInline> _functionInline;
        
        [XmlElementAttribute("function-inline")]
        public List<FunctionInline> FunctionInline
        {
            get
            {
                return _functionInline;
            }
            private set
            {
                _functionInline = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FunctionInline collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionInlineSpecified
        {
            get
            {
                return (this.FunctionInline.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<FunctionMacro> _functionMacro;
        
        [XmlElementAttribute("function-macro")]
        public List<FunctionMacro> FunctionMacro
        {
            get
            {
                return _functionMacro;
            }
            private set
            {
                _functionMacro = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FunctionMacro collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionMacroSpecified
        {
            get
            {
                return (this.FunctionMacro.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Union> _union;
        
        [XmlElementAttribute("union")]
        public List<Union> Union
        {
            get
            {
                return _union;
            }
            private set
            {
                _union = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Union collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UnionSpecified
        {
            get
            {
                return (this.Union.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Bitfield> _bitfield;
        
        [XmlElementAttribute("bitfield")]
        public List<Bitfield> Bitfield
        {
            get
            {
                return _bitfield;
            }
            private set
            {
                _bitfield = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Bitfield collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BitfieldSpecified
        {
            get
            {
                return (this.Bitfield.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Callback> _callback;
        
        [XmlElementAttribute("callback")]
        public List<Callback> Callback
        {
            get
            {
                return _callback;
            }
            private set
            {
                _callback = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Callback collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CallbackSpecified
        {
            get
            {
                return (this.Callback.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Constant> _constant;
        
        [XmlElementAttribute("constant")]
        public List<Constant> Constant
        {
            get
            {
                return _constant;
            }
            private set
            {
                _constant = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Constant collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstantSpecified
        {
            get
            {
                return (this.Constant.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Attribute> _attribute;
        
        [XmlElementAttribute("attribute")]
        public List<Attribute> Attribute
        {
            get
            {
                return _attribute;
            }
            private set
            {
                _attribute = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Attribute collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AttributeSpecified
        {
            get
            {
                return (this.Attribute.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<MentorLake.Gir.GLib.Boxed> _boxed;
        
        [XmlElementAttribute("boxed", Namespace="http://www.gtk.org/introspection/glib/1.0")]
        public List<MentorLake.Gir.GLib.Boxed> Boxed
        {
            get
            {
                return _boxed;
            }
            private set
            {
                _boxed = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Boxed collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool BoxedSpecified
        {
            get
            {
                return (this.Boxed.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Docsection> _docsection;
        
        [XmlElementAttribute("docsection")]
        public List<Docsection> Docsection
        {
            get
            {
                return _docsection;
            }
            private set
            {
                _docsection = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Docsection collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DocsectionSpecified
        {
            get
            {
                return (this.Docsection.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>name of the namespace. For example, 'Gtk'</para>
        /// </summary>
        [DescriptionAttribute("name of the namespace. For example, \'Gtk\'")]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>version number of the namespace</para>
        /// </summary>
        [DescriptionAttribute("version number of the namespace")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        [XmlAttributeAttribute("identifier-prefixes", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string IdentifierPrefixes { get; set; }
        
        [XmlAttributeAttribute("symbol-prefixes", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string SymbolPrefixes { get; set; }
        
        [XmlAttributeAttribute("prefix", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string Prefix { get; set; }
        
        /// <summary>
        /// <para>Path to the shared library implementing the namespace. It can be a comma-separated list, with relative path only</para>
        /// </summary>
        [DescriptionAttribute("Path to the shared library implementing the namespace. It can be a comma-separate" +
            "d list, with relative path only")]
        [XmlAttributeAttribute("shared-library")]
        public string SharedLibrary { get; set; }
    }
}
