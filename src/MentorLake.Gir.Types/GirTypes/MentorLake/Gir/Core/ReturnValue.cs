//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("return-value", Namespace="http://www.gtk.org/introspection/core/1.0", AnonymousType=true)]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("return-value", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class ReturnValue : IDocElements
    {
        
        [XmlIgnoreAttribute()]
        private List<DocVersion> _docVersion;
        
        [XmlElementAttribute("doc-version")]
        public List<DocVersion> DocVersion
        {
            get
            {
                return _docVersion;
            }
            private set
            {
                _docVersion = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DocVersion collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DocVersionSpecified
        {
            get
            {
                return (this.DocVersion.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ReturnValue" /> class.</para>
        /// </summary>
        public ReturnValue()
        {
            this._docVersion = new List<DocVersion>();
            this._docStability = new List<DocStability>();
            this._doc = new List<Doc>();
            this._docDeprecated = new List<DocDeprecated>();
            this._sourcePosition = new List<SourcePosition>();
            this._attribute = new List<Attribute>();
        }
        
        [XmlIgnoreAttribute()]
        private List<DocStability> _docStability;
        
        [XmlElementAttribute("doc-stability")]
        public List<DocStability> DocStability
        {
            get
            {
                return _docStability;
            }
            private set
            {
                _docStability = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DocStability collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DocStabilitySpecified
        {
            get
            {
                return (this.DocStability.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Doc> _doc;
        
        [XmlElementAttribute("doc")]
        public List<Doc> Doc
        {
            get
            {
                return _doc;
            }
            private set
            {
                _doc = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Doc collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DocSpecified
        {
            get
            {
                return (this.Doc.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<DocDeprecated> _docDeprecated;
        
        [XmlElementAttribute("doc-deprecated")]
        public List<DocDeprecated> DocDeprecated
        {
            get
            {
                return _docDeprecated;
            }
            private set
            {
                _docDeprecated = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the DocDeprecated collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DocDeprecatedSpecified
        {
            get
            {
                return (this.DocDeprecated.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<SourcePosition> _sourcePosition;
        
        [XmlElementAttribute("source-position")]
        public List<SourcePosition> SourcePosition
        {
            get
            {
                return _sourcePosition;
            }
            private set
            {
                _sourcePosition = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the SourcePosition collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SourcePositionSpecified
        {
            get
            {
                return (this.SourcePosition.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Attribute> _attribute;
        
        [XmlElementAttribute("attribute")]
        public List<Attribute> Attribute
        {
            get
            {
                return _attribute;
            }
            private set
            {
                _attribute = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Attribute collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AttributeSpecified
        {
            get
            {
                return (this.Attribute.Count != 0);
            }
        }
        
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlElementAttribute("type", Type=typeof(Type), Namespace="http://www.gtk.org/introspection/core/1.0")]
        [XmlElementAttribute("array", Type=typeof(Array), Namespace="http://www.gtk.org/introspection/core/1.0")]
        [XmlElementAttribute("AnyType")]
        public object AnyType { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public ReturnValueIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the parameter can have a null value</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the parameter can have a null value")]
        [XmlAttributeAttribute("nullable")]
        public ReturnValueNullable Nullable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Nullable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NullableSpecified { get; set; }
        
        /// <summary>
        /// <para>the parameter is a user_data for callbacks. The value points to a different parameter that is the actual callback</para>
        /// </summary>
        [DescriptionAttribute("the parameter is a user_data for callbacks. The value points to a different param" +
            "eter that is the actual callback")]
        [XmlAttributeAttribute("closure")]
        public string Closure { get; set; }
        
        /// <summary>
        /// <para>the parameter is a callback, the value indicates the lifetime of the call. For language bindings which want to know when the resources required to do the call can be freed. "notified" valid until a GDestroyNotify argument is called, "async" only valid for the duration of the first callback invocation (can only be called once), "call" only valid for the duration of the call, can be called multiple times during the call, "forever" valid until the process terminates.</para>
        /// </summary>
        [DescriptionAttribute(@"the parameter is a callback, the value indicates the lifetime of the call. For language bindings which want to know when the resources required to do the call can be freed. ""notified"" valid until a GDestroyNotify argument is called, ""async"" only valid for the duration of the first callback invocation (can only be called once), ""call"" only valid for the duration of the call, can be called multiple times during the call, ""forever"" valid until the process terminates.")]
        [XmlAttributeAttribute("scope")]
        public ReturnValueScope Scope { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Scope property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ScopeSpecified { get; set; }
        
        /// <summary>
        /// <para>the parameter is a destroy_data for callbacks. The value points to a different parameter that is the actual callback</para>
        /// </summary>
        [DescriptionAttribute("the parameter is a destroy_data for callbacks. The value points to a different pa" +
            "rameter that is the actual callback")]
        [XmlAttributeAttribute("destroy")]
        public string Destroy { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the parameter can be omitted from the introspected output</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the parameter can be omitted from the introspected outp" +
            "ut")]
        [XmlAttributeAttribute("skip")]
        public ReturnValueSkip Skip { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Skip property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SkipSpecified { get; set; }
        
        /// <summary>
        /// <para>Deprecated. Replaced by nullable and optional</para>
        /// </summary>
        [DescriptionAttribute("Deprecated. Replaced by nullable and optional")]
        [XmlAttributeAttribute("allow-none")]
        public ReturnValueAllowNone AllowNone { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the AllowNone property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AllowNoneSpecified { get; set; }
        
        [XmlAttributeAttribute("transfer-ownership")]
        public ReturnValueTransferOwnership TransferOwnership { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferOwnership property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TransferOwnershipSpecified { get; set; }
    }
}
