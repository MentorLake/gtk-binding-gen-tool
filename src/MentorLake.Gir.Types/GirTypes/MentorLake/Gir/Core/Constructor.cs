//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("constructor", Namespace="http://www.gtk.org/introspection/core/1.0")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("constructor", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class Constructor : InfoElements, ICallableAttrs
    {
        
        [XmlElementAttribute("parameters")]
        public Parameters Parameters { get; set; }
        
        [XmlElementAttribute("return-value")]
        public ReturnValue ReturnValue { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public IInfoAttrsIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "1" (true) if the element has been deprecated</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"1\" (true) if the element has been deprecated")]
        [XmlAttributeAttribute("deprecated")]
        public IInfoAttrsDeprecated Deprecated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deprecated property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeprecatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Version number from which this element is deprecated</para>
        /// </summary>
        [DescriptionAttribute("Version number from which this element is deprecated")]
        [XmlAttributeAttribute("deprecated-version")]
        public string DeprecatedVersion { get; set; }
        
        /// <summary>
        /// <para>version number of an element</para>
        /// </summary>
        [DescriptionAttribute("version number of an element")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</para>
        /// </summary>
        [DescriptionAttribute("give the statibility status of the element. Can take the values \"Stable\", \"Unstab" +
            "le\" or \"Private\"")]
        [XmlAttributeAttribute("stability")]
        public string Stability { get; set; }
        
        /// <summary>
        /// <para>name of the Callable</para>
        /// </summary>
        [DescriptionAttribute("name of the Callable")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("identifier", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string Identifier { get; set; }
        
        /// <summary>
        /// <para>Callable it is shadowed by. For example, in C++, only one version of an overloaded callable will appear</para>
        /// </summary>
        [DescriptionAttribute("Callable it is shadowed by. For example, in C++, only one version of an overloade" +
            "d callable will appear")]
        [XmlAttributeAttribute("shadowed-by")]
        public string ShadowedBy { get; set; }
        
        /// <summary>
        /// <para>Callable it shadows. For example, in C++, only one version of an overloaded callable will appear</para>
        /// </summary>
        [DescriptionAttribute("Callable it shadows. For example, in C++, only one version of an overloaded calla" +
            "ble will appear")]
        [XmlAttributeAttribute("shadows")]
        public string Shadows { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the callable can throw an error</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the callable can throw an error")]
        [XmlAttributeAttribute("throws")]
        public ICallableAttrsThrows Throws { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Throws property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ThrowsSpecified { get; set; }
        
        /// <summary>
        /// <para>if for backward compatibility reason the callable has a name in the source code but should be known by another one, this attribute contains the new name</para>
        /// </summary>
        [DescriptionAttribute("if for backward compatibility reason the callable has a name in the source code b" +
            "ut should be known by another one, this attribute contains the new name")]
        [XmlAttributeAttribute("moved-to")]
        public string MovedTo { get; set; }
        
        [XmlAttributeAttribute("async-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string AsyncFunc { get; set; }
        
        [XmlAttributeAttribute("sync-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string SyncFunc { get; set; }
        
        [XmlAttributeAttribute("finish-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string FinishFunc { get; set; }
    }
}
