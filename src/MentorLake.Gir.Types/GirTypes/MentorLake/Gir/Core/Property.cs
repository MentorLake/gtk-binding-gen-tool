//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("property", Namespace="http://www.gtk.org/introspection/core/1.0")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("property", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class Property : InfoElements, IInfoAttrs
    {
        
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlElementAttribute("type", Type=typeof(Type), Namespace="http://www.gtk.org/introspection/core/1.0")]
        [XmlElementAttribute("array", Type=typeof(Array), Namespace="http://www.gtk.org/introspection/core/1.0")]
        [XmlElementAttribute("AnyType")]
        public object AnyType { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public IInfoAttrsIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "1" (true) if the element has been deprecated</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"1\" (true) if the element has been deprecated")]
        [XmlAttributeAttribute("deprecated")]
        public IInfoAttrsDeprecated Deprecated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deprecated property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeprecatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Version number from which this element is deprecated</para>
        /// </summary>
        [DescriptionAttribute("Version number from which this element is deprecated")]
        [XmlAttributeAttribute("deprecated-version")]
        public string DeprecatedVersion { get; set; }
        
        /// <summary>
        /// <para>version number of an element</para>
        /// </summary>
        [DescriptionAttribute("version number of an element")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</para>
        /// </summary>
        [DescriptionAttribute("give the statibility status of the element. Can take the values \"Stable\", \"Unstab" +
            "le\" or \"Private\"")]
        [XmlAttributeAttribute("stability")]
        public string Stability { get; set; }
        
        /// <summary>
        /// <para>name of the property</para>
        /// </summary>
        [DescriptionAttribute("name of the property")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the property is writeable, that is it has a setter function</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the property is writeable, that is it has a setter func" +
            "tion")]
        [XmlAttributeAttribute("writable")]
        public PropertyWritable Writable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Writable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WritableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the property is readable, that is it has a getter function</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the property is readable, that is it has a getter funct" +
            "ion")]
        [XmlAttributeAttribute("readable")]
        public PropertyReadable Readable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Readable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ReadableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the property will be set upon construction</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the property will be set upon construction")]
        [XmlAttributeAttribute("construct")]
        public PropertyConstruct Construct { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Construct property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstructSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the property can only be set upon construction</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the property can only be set upon construction")]
        [XmlAttributeAttribute("construct-only")]
        public PropertyConstructOnly ConstructOnly { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ConstructOnly property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstructOnlySpecified { get; set; }
        
        /// <summary>
        /// <para>The setter function for this property</para>
        /// </summary>
        [DescriptionAttribute("The setter function for this property")]
        [XmlAttributeAttribute("setter")]
        public string Setter { get; set; }
        
        /// <summary>
        /// <para>The getter function for this property</para>
        /// </summary>
        [DescriptionAttribute("The getter function for this property")]
        [XmlAttributeAttribute("getter")]
        public string Getter { get; set; }
        
        /// <summary>
        /// <para>The default value of the property, as a string; if missing, the default value is zero for integer types, and null for pointer types</para>
        /// </summary>
        [DescriptionAttribute("The default value of the property, as a string; if missing, the default value is " +
            "zero for integer types, and null for pointer types")]
        [XmlAttributeAttribute("default-value")]
        public string DefaultValue { get; set; }
        
        [XmlAttributeAttribute("transfer-ownership")]
        public PropertyTransferOwnership TransferOwnership { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TransferOwnership property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool TransferOwnershipSpecified { get; set; }
    }
}
