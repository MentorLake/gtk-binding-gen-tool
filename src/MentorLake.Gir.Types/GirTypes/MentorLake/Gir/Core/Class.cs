//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("class", Namespace="http://www.gtk.org/introspection/core/1.0")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("class", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class Class : InfoElements, IInfoAttrs, MentorLake.Gir.GLib.ITypeName1, MentorLake.Gir.GLib.IGetType1, MentorLake.Gir.GLib.ITypeStruct1
    {
        
        [XmlIgnoreAttribute()]
        private List<Implements> _implements;
        
        [XmlElementAttribute("implements")]
        public List<Implements> Implements
        {
            get
            {
                return _implements;
            }
            private set
            {
                _implements = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Implements collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ImplementsSpecified
        {
            get
            {
                return (this.Implements.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Class" /> class.</para>
        /// </summary>
        public Class()
        {
            this._implements = new List<Implements>();
            this._constructor = new List<Constructor>();
            this._method = new List<Method>();
            this._methodInline = new List<MethodInline>();
            this._function = new List<BaseFunction>();
            this._functionInline = new List<FunctionInline>();
            this._virtualMethod = new List<VirtualMethod>();
            this._field = new List<Field>();
            this._property = new List<Property>();
            this._signal = new List<MentorLake.Gir.GLib.Signal>();
            this._union = new List<Union>();
            this._constant = new List<Constant>();
            this._record = new List<Record>();
            this._callback = new List<Callback>();
        }
        
        [XmlIgnoreAttribute()]
        private List<Constructor> _constructor;
        
        [XmlElementAttribute("constructor")]
        public List<Constructor> Constructor
        {
            get
            {
                return _constructor;
            }
            private set
            {
                _constructor = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Constructor collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstructorSpecified
        {
            get
            {
                return (this.Constructor.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Method> _method;
        
        [XmlElementAttribute("method")]
        public List<Method> Method
        {
            get
            {
                return _method;
            }
            private set
            {
                _method = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Method collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MethodSpecified
        {
            get
            {
                return (this.Method.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<MethodInline> _methodInline;
        
        [XmlElementAttribute("method-inline")]
        public List<MethodInline> MethodInline
        {
            get
            {
                return _methodInline;
            }
            private set
            {
                _methodInline = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MethodInline collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MethodInlineSpecified
        {
            get
            {
                return (this.MethodInline.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<BaseFunction> _function;
        
        [XmlElementAttribute("function")]
        public List<BaseFunction> Function
        {
            get
            {
                return _function;
            }
            private set
            {
                _function = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Function collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionSpecified
        {
            get
            {
                return (this.Function.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<FunctionInline> _functionInline;
        
        [XmlElementAttribute("function-inline")]
        public List<FunctionInline> FunctionInline
        {
            get
            {
                return _functionInline;
            }
            private set
            {
                _functionInline = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FunctionInline collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionInlineSpecified
        {
            get
            {
                return (this.FunctionInline.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<VirtualMethod> _virtualMethod;
        
        [XmlElementAttribute("virtual-method")]
        public List<VirtualMethod> VirtualMethod
        {
            get
            {
                return _virtualMethod;
            }
            private set
            {
                _virtualMethod = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the VirtualMethod collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool VirtualMethodSpecified
        {
            get
            {
                return (this.VirtualMethod.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Field> _field;
        
        [XmlElementAttribute("field")]
        public List<Field> Field
        {
            get
            {
                return _field;
            }
            private set
            {
                _field = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Field collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FieldSpecified
        {
            get
            {
                return (this.Field.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Property> _property;
        
        [XmlElementAttribute("property")]
        public List<Property> Property
        {
            get
            {
                return _property;
            }
            private set
            {
                _property = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Property collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PropertySpecified
        {
            get
            {
                return (this.Property.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<MentorLake.Gir.GLib.Signal> _signal;
        
        [XmlElementAttribute("signal", Namespace="http://www.gtk.org/introspection/glib/1.0")]
        public List<MentorLake.Gir.GLib.Signal> Signal
        {
            get
            {
                return _signal;
            }
            private set
            {
                _signal = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Signal collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool SignalSpecified
        {
            get
            {
                return (this.Signal.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Union> _union;
        
        [XmlElementAttribute("union")]
        public List<Union> Union
        {
            get
            {
                return _union;
            }
            private set
            {
                _union = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Union collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UnionSpecified
        {
            get
            {
                return (this.Union.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Constant> _constant;
        
        [XmlElementAttribute("constant")]
        public List<Constant> Constant
        {
            get
            {
                return _constant;
            }
            private set
            {
                _constant = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Constant collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstantSpecified
        {
            get
            {
                return (this.Constant.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Record> _record;
        
        [XmlElementAttribute("record")]
        public List<Record> Record
        {
            get
            {
                return _record;
            }
            private set
            {
                _record = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Record collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool RecordSpecified
        {
            get
            {
                return (this.Record.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Callback> _callback;
        
        [XmlElementAttribute("callback")]
        public List<Callback> Callback
        {
            get
            {
                return _callback;
            }
            private set
            {
                _callback = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Callback collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool CallbackSpecified
        {
            get
            {
                return (this.Callback.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public IInfoAttrsIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "1" (true) if the element has been deprecated</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"1\" (true) if the element has been deprecated")]
        [XmlAttributeAttribute("deprecated")]
        public IInfoAttrsDeprecated Deprecated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deprecated property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeprecatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Version number from which this element is deprecated</para>
        /// </summary>
        [DescriptionAttribute("Version number from which this element is deprecated")]
        [XmlAttributeAttribute("deprecated-version")]
        public string DeprecatedVersion { get; set; }
        
        /// <summary>
        /// <para>version number of an element</para>
        /// </summary>
        [DescriptionAttribute("version number of an element")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</para>
        /// </summary>
        [DescriptionAttribute("give the statibility status of the element. Can take the values \"Stable\", \"Unstab" +
            "le\" or \"Private\"")]
        [XmlAttributeAttribute("stability")]
        public string Stability { get; set; }
        
        /// <summary>
        /// <para>Name of the class</para>
        /// </summary>
        [DescriptionAttribute("Name of the class")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>GObject compatible type name of the class</para>
        /// </summary>
        [DescriptionAttribute("GObject compatible type name of the class")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("type-name", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string TypeName { get; set; }
        
        /// <summary>
        /// <para>Function to get the GObject compatible type of the class</para>
        /// </summary>
        [DescriptionAttribute("Function to get the GObject compatible type of the class")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("get-type", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string GetType { get; set; }
        
        /// <summary>
        /// <para>Name of the parent class if any</para>
        /// </summary>
        [DescriptionAttribute("Name of the parent class if any")]
        [XmlAttributeAttribute("parent")]
        public string Parent { get; set; }
        
        /// <summary>
        /// <para>GObject compatible C structure defining the class</para>
        /// </summary>
        [DescriptionAttribute("GObject compatible C structure defining the class")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("type-struct", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string TypeStruct { get; set; }
        
        [XmlAttributeAttribute("ref-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string RefFunc { get; set; }
        
        [XmlAttributeAttribute("unref-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string UnrefFunc { get; set; }
        
        [XmlAttributeAttribute("set-value-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string SetValueFunc { get; set; }
        
        [XmlAttributeAttribute("get-value-func", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string GetValueFunc { get; set; }
        
        [XmlAttributeAttribute("type", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string Type { get; set; }
        
        [XmlAttributeAttribute("symbol-prefix", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string SymbolPrefix { get; set; }
        
        /// <summary>
        /// <para>Binary attribute to declare the class abstract or not</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute to declare the class abstract or not")]
        [XmlAttributeAttribute("abstract")]
        public ClassAbstract Abstract { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Abstract property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool AbstractSpecified { get; set; }
        
        [XmlAttributeAttribute("fundamental", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public MentorLake.Gir.GLib.Fundamental Fundamental { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fundamental property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FundamentalSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute to declare the class final or not (non-derivable class in a derivable hierarchy)</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute to declare the class final or not (non-derivable class in a deri" +
            "vable hierarchy)")]
        [XmlAttributeAttribute("final")]
        public ClassFinal Final { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Final property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FinalSpecified { get; set; }
    }
}
