//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.Core
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("record", Namespace="http://www.gtk.org/introspection/core/1.0")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("record", Namespace="http://www.gtk.org/introspection/core/1.0")]
    public partial class Record : InfoElements, IInfoAttrs, MentorLake.Gir.GLib.ITypeName2, MentorLake.Gir.GLib.IGetType2
    {
        
        [XmlIgnoreAttribute()]
        private List<Field> _field;
        
        [XmlElementAttribute("field")]
        public List<Field> Field
        {
            get
            {
                return _field;
            }
            private set
            {
                _field = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Field collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FieldSpecified
        {
            get
            {
                return (this.Field.Count != 0);
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Record" /> class.</para>
        /// </summary>
        public Record()
        {
            this._field = new List<Field>();
            this._function = new List<BaseFunction>();
            this._functionInline = new List<FunctionInline>();
            this._union = new List<Union>();
            this._method = new List<Method>();
            this._methodInline = new List<MethodInline>();
            this._constructor = new List<Constructor>();
        }
        
        [XmlIgnoreAttribute()]
        private List<BaseFunction> _function;
        
        [XmlElementAttribute("function")]
        public List<BaseFunction> Function
        {
            get
            {
                return _function;
            }
            private set
            {
                _function = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Function collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionSpecified
        {
            get
            {
                return (this.Function.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<FunctionInline> _functionInline;
        
        [XmlElementAttribute("function-inline")]
        public List<FunctionInline> FunctionInline
        {
            get
            {
                return _functionInline;
            }
            private set
            {
                _functionInline = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the FunctionInline collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool FunctionInlineSpecified
        {
            get
            {
                return (this.FunctionInline.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Union> _union;
        
        [XmlElementAttribute("union")]
        public List<Union> Union
        {
            get
            {
                return _union;
            }
            private set
            {
                _union = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Union collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool UnionSpecified
        {
            get
            {
                return (this.Union.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Method> _method;
        
        [XmlElementAttribute("method")]
        public List<Method> Method
        {
            get
            {
                return _method;
            }
            private set
            {
                _method = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Method collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MethodSpecified
        {
            get
            {
                return (this.Method.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<MethodInline> _methodInline;
        
        [XmlElementAttribute("method-inline")]
        public List<MethodInline> MethodInline
        {
            get
            {
                return _methodInline;
            }
            private set
            {
                _methodInline = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the MethodInline collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool MethodInlineSpecified
        {
            get
            {
                return (this.MethodInline.Count != 0);
            }
        }
        
        [XmlIgnoreAttribute()]
        private List<Constructor> _constructor;
        
        [XmlElementAttribute("constructor")]
        public List<Constructor> Constructor
        {
            get
            {
                return _constructor;
            }
            private set
            {
                _constructor = value;
            }
        }
        
        /// <summary>
        /// <para xml:lang="en">Gets a value indicating whether the Constructor collection is empty.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ConstructorSpecified
        {
            get
            {
                return (this.Constructor.Count != 0);
            }
        }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public IInfoAttrsIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "1" (true) if the element has been deprecated</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"1\" (true) if the element has been deprecated")]
        [XmlAttributeAttribute("deprecated")]
        public IInfoAttrsDeprecated Deprecated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deprecated property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeprecatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Version number from which this element is deprecated</para>
        /// </summary>
        [DescriptionAttribute("Version number from which this element is deprecated")]
        [XmlAttributeAttribute("deprecated-version")]
        public string DeprecatedVersion { get; set; }
        
        /// <summary>
        /// <para>version number of an element</para>
        /// </summary>
        [DescriptionAttribute("version number of an element")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</para>
        /// </summary>
        [DescriptionAttribute("give the statibility status of the element. Can take the values \"Stable\", \"Unstab" +
            "le\" or \"Private\"")]
        [XmlAttributeAttribute("stability")]
        public string Stability { get; set; }
        
        /// <summary>
        /// <para>name of the record</para>
        /// </summary>
        [DescriptionAttribute("name of the record")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        [XmlAttributeAttribute("type", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string Type { get; set; }
        
        /// <summary>
        /// <para>Deprecated. Binary attribute to tell if the record is disguised, i.e. whether the c:type
        ///is a typedef that doesn't look like a pointer, but is one internally. Its second meaning
        ///is "private" and is set when any typedef struct is parsed which doesn't also include a
        ///full struct with fields (https://gitlab.gnome.org/GNOME/gobject-introspection/issues/101)
        ///Replaced by "opaque" and "pointer".</para>
        /// </summary>
        [DescriptionAttribute(@"Deprecated. Binary attribute to tell if the record is disguised, i.e. whether the c:type is a typedef that doesn't look like a pointer, but is one internally. Its second meaning is ""private"" and is set when any typedef struct is parsed which doesn't also include a full struct with fields (https://gitlab.gnome.org/GNOME/gobject-introspection/issues/101) Replaced by ""opaque"" and ""pointer"".")]
        [XmlAttributeAttribute("disguised")]
        public RecordDisguised Disguised { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Disguised property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DisguisedSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute for a typedef struct that does not have a corresponding public structure definition</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute for a typedef struct that does not have a corresponding public s" +
            "tructure definition")]
        [XmlAttributeAttribute("opaque")]
        public RecordOpaque Opaque { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Opaque property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool OpaqueSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute for a typedef struct pointer, e.g. typedef struct Foo* FooPtr</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute for a typedef struct pointer, e.g. typedef struct Foo* FooPtr")]
        [XmlAttributeAttribute("pointer")]
        public RecordPointer Pointer { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pointer property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool PointerSpecified { get; set; }
        
        /// <summary>
        /// <para>GObject compatible C type of the record</para>
        /// </summary>
        [DescriptionAttribute("GObject compatible C type of the record")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("type-name", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string TypeName { get; set; }
        
        /// <summary>
        /// <para>Function to get the GObject compatible type of the record</para>
        /// </summary>
        [DescriptionAttribute("Function to get the GObject compatible type of the record")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("get-type", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string GetType { get; set; }
        
        [XmlAttributeAttribute("symbol-prefix", Namespace="http://www.gtk.org/introspection/c/1.0", Form=XmlSchemaForm.Qualified)]
        public string SymbolPrefix { get; set; }
        
        /// <summary>
        /// <para>Binary attribute to tell if the record is foreign, that is it is not available in a g-i supported library</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute to tell if the record is foreign, that is it is not available in" +
            " a g-i supported library")]
        [XmlAttributeAttribute("foreign")]
        public RecordForeign Foreign { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Foreign property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ForeignSpecified { get; set; }
        
        [XmlAttributeAttribute("is-gtype-struct-for", Namespace="http://www.gtk.org/introspection/glib/1.0", Form=XmlSchemaForm.Qualified)]
        public string IsGtypeStructFor { get; set; }
        
        /// <summary>
        /// <para>Name of the function used to copy the record</para>
        /// </summary>
        [DescriptionAttribute("Name of the function used to copy the record")]
        [XmlAttributeAttribute("copy-function")]
        public string CopyFunction { get; set; }
        
        /// <summary>
        /// <para>Name of the function used to free the record</para>
        /// </summary>
        [DescriptionAttribute("Name of the function used to free the record")]
        [XmlAttributeAttribute("free-function")]
        public string FreeFunction { get; set; }
    }
}
