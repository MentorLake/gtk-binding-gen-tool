//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.1.1174.0 using the following command:
// xscgen -n |core.xsd=MentorLake.Gir.Core -n |c.xsd=MentorLake.Gir.C -n |glib.xsd=MentorLake.Gir.GLib -n |xml.xsd=MentorLake.Gir.Xml --o GirTypes --cn --uc -ct System.Collections.Generic.List`1 --sf --nh ./core.xsd
namespace MentorLake.Gir.GLib
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Serialization;
    
    
    [GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.1.1174.0")]
    [SerializableAttribute()]
    [XmlTypeAttribute("signal", Namespace="http://www.gtk.org/introspection/glib/1.0")]
    [DebuggerStepThroughAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute("signal", Namespace="http://www.gtk.org/introspection/glib/1.0")]
    public partial class Signal : MentorLake.Gir.Core.InfoElements, MentorLake.Gir.Core.IInfoAttrs
    {
        
        [XmlElementAttribute("parameters", Namespace="http://www.gtk.org/introspection/core/1.0")]
        public MentorLake.Gir.Core.Parameters Parameters { get; set; }
        
        [XmlElementAttribute("return-value", Namespace="http://www.gtk.org/introspection/core/1.0")]
        public MentorLake.Gir.Core.ReturnValue ReturnValue { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "0" (false) if the element is not introspectable. It doesn't exist in the bindings, due in general to missing information in the annotations in the original C code</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"0\" (false) if the element is not introspectable. It do" +
            "esn\'t exist in the bindings, due in general to missing information in the annota" +
            "tions in the original C code")]
        [XmlAttributeAttribute("introspectable")]
        public MentorLake.Gir.Core.IInfoAttrsIntrospectable Introspectable { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Introspectable property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool IntrospectableSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute which is "1" (true) if the element has been deprecated</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute which is \"1\" (true) if the element has been deprecated")]
        [XmlAttributeAttribute("deprecated")]
        public MentorLake.Gir.Core.IInfoAttrsDeprecated Deprecated { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Deprecated property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DeprecatedSpecified { get; set; }
        
        /// <summary>
        /// <para>Version number from which this element is deprecated</para>
        /// </summary>
        [DescriptionAttribute("Version number from which this element is deprecated")]
        [XmlAttributeAttribute("deprecated-version")]
        public string DeprecatedVersion { get; set; }
        
        /// <summary>
        /// <para>version number of an element</para>
        /// </summary>
        [DescriptionAttribute("version number of an element")]
        [XmlAttributeAttribute("version")]
        public string Version { get; set; }
        
        /// <summary>
        /// <para>give the statibility status of the element. Can take the values "Stable", "Unstable" or "Private"</para>
        /// </summary>
        [DescriptionAttribute("give the statibility status of the element. Can take the values \"Stable\", \"Unstab" +
            "le\" or \"Private\"")]
        [XmlAttributeAttribute("stability")]
        public string Stability { get; set; }
        
        /// <summary>
        /// <para>name of the signal</para>
        /// </summary>
        [DescriptionAttribute("name of the signal")]
        [RequiredAttribute(AllowEmptyStrings=true)]
        [XmlAttributeAttribute("name")]
        public string Name { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the signal has a detailed parameter (https://docs.gtk.org/gobject/concepts.html#the-detail-argument and https://docs.gtk.org/gobject/flags.SignalFlags.html)</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the signal has a detailed parameter (https://docs.gtk.o" +
            "rg/gobject/concepts.html#the-detail-argument and https://docs.gtk.org/gobject/fl" +
            "ags.SignalFlags.html)")]
        [XmlAttributeAttribute("detailed")]
        public SignalDetailed Detailed { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Detailed property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool DetailedSpecified { get; set; }
        
        /// <summary>
        /// <para>When to run the signal during the 5 steps of signal emission (https://docs.gtk.org/gobject/concepts.html#signal-emission and https://docs.gtk.org/gobject/flags.SignalFlags.html)</para>
        /// </summary>
        [DescriptionAttribute("When to run the signal during the 5 steps of signal emission (https://docs.gtk.or" +
            "g/gobject/concepts.html#signal-emission and https://docs.gtk.org/gobject/flags.S" +
            "ignalFlags.html)")]
        [XmlAttributeAttribute("when")]
        public SignalWhen When { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the When property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool WhenSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if the signal can be freely emitted on alive objects from user code (https://docs.gtk.org/gobject/flags.SignalFlags.html)</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if the signal can be freely emitted on alive objects from " +
            "user code (https://docs.gtk.org/gobject/flags.SignalFlags.html)")]
        [XmlAttributeAttribute("action")]
        public SignalAction Action { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Action property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool ActionSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if no emission hooks are supported for this signal (https://docs.gtk.org/gobject/flags.SignalFlags.html)</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if no emission hooks are supported for this signal (https:" +
            "//docs.gtk.org/gobject/flags.SignalFlags.html)")]
        [XmlAttributeAttribute("no-hooks")]
        public SignalNoHooks NoHooks { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoHooks property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NoHooksSpecified { get; set; }
        
        /// <summary>
        /// <para>Binary attribute, true if signals emitted for an object while currently being in emission for this very object will not be emitted recursively, but instead cause the first emission to be restarted (https://docs.gtk.org/gobject/flags.SignalFlags.html)</para>
        /// </summary>
        [DescriptionAttribute("Binary attribute, true if signals emitted for an object while currently being in " +
            "emission for this very object will not be emitted recursively, but instead cause" +
            " the first emission to be restarted (https://docs.gtk.org/gobject/flags.SignalFl" +
            "ags.html)")]
        [XmlAttributeAttribute("no-recurse")]
        public SignalNoRecurse NoRecurse { get; set; }
        
        /// <summary>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NoRecurse property is specified.</para>
        /// </summary>
        [XmlIgnoreAttribute()]
        public bool NoRecurseSpecified { get; set; }
        
        /// <summary>
        /// <para>The emitter method for the signal</para>
        /// </summary>
        [DescriptionAttribute("The emitter method for the signal")]
        [XmlAttributeAttribute("emitter")]
        public string Emitter { get; set; }
    }
}
